openapi: 3.0.0
info:
  title: Full Task Management API
  description: Combined API documentation for Auth, Employee, and Task services
  version: "1.0.0"

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /auth/login:
    post:
      summary: Log in a user and receive a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin123
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  payload:
                    type: string
                    description: JWT token

  /employees:
    get:
      summary: Get all employees
      tags:
        - Employees
      responses:
        '200':
          description: List of employees
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'

    post:
      summary: Create a new employee
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInput'
      responses:
        '201':
          description: Employee created
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Employee'

  /employees/{id}:
    get:
      summary: Get employee by ID
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Employee found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Employee'

    put:
      summary: Update employee by ID
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeInput'
      responses:
        '200':
          description: Employee updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Employee'

    delete:
      summary: Delete employee by ID
      tags:
        - Employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee deleted

  /tasks:
    get:
      summary: Get all tasks
      tags:
        - Tasks
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskWithEmployee'

    post:
      summary: Create a new task
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/TaskWithEmployee'

    put:
      summary: Update task
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Task'

    delete:
      summary: Delete task
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted

  /tasks/{id}/assign:
    put:
      summary: Assign an employee to a task
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - employeeId
              properties:
                employeeId:
                  type: integer
      responses:
        '200':
          description: Employee assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Task'

components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        position:
          type: string

    EmployeeInput:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        position:
          type: string

    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        dueDate:
          type: string
          format: date-time
        employeeId:
          type: integer

    TaskWithEmployee:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            employee:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                email:
                  type: string

    TaskInput:
      type: object
      required:
        - title
        - status
        - employeeId
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        dueDate:
          type: string
          format: date-time
        employeeId:
          type: integer
